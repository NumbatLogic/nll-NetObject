namespace NumbatLogic
{
	namespace NetObject
	{
		class ChangeUint32Add : ChangeField
		{
			public static const Uint32 HASH = ExternalString::GetChecksum("ChangeUint32Add");
			public static Change** __Create() { return new ChangeUint32Add(); }
			private construct() : base(HASH) {}

			public Uint32 __nValue;

			public construct(string sxFieldName, Uint32 nValue) : base(HASH, FieldInfo::Type::UINT32, sxFieldName)
			{
				__nValue = nValue;
			}

			public override bool Apply(Object pObject)
			{
				if (!base.Apply(pObject))
					return false;
				
				pObject.__pUint32Vector.Set(__nDataIndex, pObject.__pUint32Vector.Get(__nDataIndex) + __nValue);
				return true;
			}

			public override void Pack(gsBlob pBlob)
			{
				base.Pack(pBlob);
				pBlob.PackUint32(__nValue);
			}

			public override bool Unpack(gsBlob pBlob)
			{
				if (!base.Unpack(pBlob))
					return false;
				if (!pBlob.UnpackUint32(__nValue))
					return false;
				return true;
			}
		}
	}
}