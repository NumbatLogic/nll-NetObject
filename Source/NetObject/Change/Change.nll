namespace NumbatLogic
{
	namespace NetObject
	{
		class Change
		{
			public Uint32 __nHash;

			public construct(Uint32 nHash)
			{
				__nHash = nHash;
			}

			public virtual bool Apply(Object pObject)
			{
				Assert::Plz(false);
				return false;
			}

			public virtual void Pack(gsBlob pBlob)
			{
				pBlob.PackUint32(__nHash);
			}

			public virtual bool Unpack(gsBlob pBlob)
			{
				return true;
			}
			
			public static Change** CreateAndUnpack(gsBlob pBlob)
			{
				Uint32 nHash;
				if (!pBlob.UnpackUint32(nHash))
					return null;
				
				ChangeCreateCallbackInfo pCallbackInfo = ChangeMap::__Find(nHash);
				if (!pCallbackInfo)
					return null;

				Change* pChange = own pCallbackInfo.__pCallback();
				if (pChange == null || !pChange.Unpack(pBlob))
					return null;

				return disown pChange;
			}
		}
	}
}