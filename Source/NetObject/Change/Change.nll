namespace NumbatLogic
{
	namespace NetObject
	{
		class CreateCallbackInfo
		{
			public delegate Change** Callback();

			public Uint32 __nHash;
			public Callback __pCallback;

			public construct(Uint32 nHash, Callback pCallback)
			{
				__nHash = nHash;
				__pCallback = pCallback;
			}
		}

		class ChangeMap
		{
			public static OwnedVector<CreateCallbackInfo>* __pCallbackInfoVector;
			
			public construct()
			{
				Assert::Plz(__pCallbackInfoVector == null);
				__pCallbackInfoVector = own new OwnedVector<CreateCallbackInfo>();

				Register(ChangeUint32Add::HASH, ChangeUint32Add::__Create);
				Register(ChangeUint32Set::HASH, ChangeUint32Set::__Create);
				Register(ChangeUint32Subtract::HASH, ChangeUint32Subtract::__Create);
			}
			
			public static void Register(Uint32 nHash, CreateCallbackInfo::Callback pCallback)
			{
				Assert::Plz(__pCallbackInfoVector != null);

				if (__Find(nHash) != null)
				{
					Console::Log("Callback hash already registered!");
					Assert::Plz(false);
				}

				__pCallbackInfoVector.PushBack(new CreateCallbackInfo(nHash, pCallback));
			}

			public static CreateCallbackInfo __Find(Uint32 nHash)
			{
				for (int i = 0; i < __pCallbackInfoVector.GetSize(); i++)
				{
					CreateCallbackInfo pCallbackInfo = __pCallbackInfoVector.Get(i);
					if (pCallbackInfo.__nHash == nHash)
						return pCallbackInfo;
				}
				return null;
			}
		}

		class Change
		{
			public Uint32 __nHash;

			public construct(Uint32 nHash)
			{
				__nHash = nHash;
			}

			public virtual bool Apply(Object pObject)
			{
				Assert::Plz(false);
				return false;
			}

			public virtual void Pack(gsBlob pBlob)
			{
				pBlob.PackUint32(__nHash);
			}

			public virtual bool Unpack(gsBlob pBlob)
			{
				return true;
			}
			
			public static Change** CreateAndUnpack(gsBlob pBlob)
			{
				Uint32 nHash;
				if (!pBlob.UnpackUint32(nHash))
					return null;
				
				CreateCallbackInfo pCallbackInfo = ChangeMap::__Find(nHash);
				if (!pCallbackInfo)
					return null;

				Change* pChange = own pCallbackInfo.__pCallback();
				if (pChange == null || !pChange.Unpack(pBlob))
					return null;

				return disown pChange;
			}
		}
	}
}