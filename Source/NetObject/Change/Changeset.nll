namespace NumbatLogic
{
	namespace NetObject
	{
		class Changeset
		{
			public OwnedVector<Change>* __pChangeVector;
			
			public construct()
			{
				__pChangeVector = own new OwnedVector<Change>();
			}
			
			public void AddChange(Change** pChange)
			{
				__pChangeVector.PushBack(pChange);
			}

			public bool Apply(Object pObject)
			{
				for (int i = 0; i < __pChangeVector.GetSize(); i++)
				{
					Change pChange = __pChangeVector.Get(i);
					if (!pChange.Apply(pObject))
						return false;
				}
				return true;
			}

			public void Pack(gsBlob pBlob)
			{
				pBlob.PackUint8(__pChangeVector.GetSize());
				for (int i = 0; i < __pChangeVector.GetSize(); i++)
				{
					Change pChange = __pChangeVector.Get(i);
					pChange.Pack(pBlob);
				}
			}

			public override bool Unpack(gsBlob pBlob)
			{
				Assert::Plz(__pChangeVector.GetSize() == 0);

				Uint8 nCount;
				if (!pBlob.UnpackUint8(nCount))
					return false;

				for (int i = 0; i < nCount; i++)
				{
					Change* pChange = own Change::CreateAndUnpack(pBlob);
					if (pChange == null)
						return false;
					AddChange(disown pChange);
				}

				return true;
			}
		}
	}
}