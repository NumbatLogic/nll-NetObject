namespace NumbatLogic
{
	namespace NetObject
	{
		class FieldInfo
		{
			public enum Type {
				UINT32,
				STRING,
				OBJECT,
				OBJECT_VECTOR
			}

			public Type __eType;
			public InternalString* __sName;
			public int __nDataIndex;
		}

		class Info
		{
			public OwnedVector<FieldInfo>* __pFieldInfoVector;
		}

		class Filter
		{
			public Vector<Filter>* __bFieldFilterVector;
		}

		class Object
		{
			public Info __pInfo;
			public Filter __pFilter;

			// todo: NLL needs fixed array tech...
			public Vector<Uint32>* __pUint32Vector;
			public OwnedVector<InternalString>* __pStringVector;

			public construct(Info pInfo, Filter pFilter)
			{
				__pInfo = pInfo;
				__pFilter = pFilter;
			}
		}


		
	}

/*
	// pUmi = pUserMonsterInfo.CreatePartial();
	// pUmp.ExposeField("nMonsterId");

	// p = pUserInfo.CreatePartial();
	// p.ExposeField("nUserId");
	// p.ExposeField("pMonsters", pUmi);


	class NetObjectFiltered
	{
		public NetObjectInfo __pObjectInfo;

		public OwnedVector<NetObjectInfo>* __pFieldVector;
	}



	// supsets?




	class NetObjectField
	{
		public enum Type {
			UINT32,
			STRING
		}

		public Type __eType;
		public Uint32 __nUint32;
		private InternalString* __sString;
		
		public construct(Uint32 nUint32)
		{
			__eType = Type::UINT32;
			__nUint32 = nUint32;
		}

		public construct(string sxString)
		{
			__eType = Type::STRING;
			__sString = own new InternalString(sxString);
		}
	}

	class NetObject
	{
		private OwnedVector<NetObjectField>* m_pFieldVector;


	}



	class NetObjectFieldChangeset
	{
		public int __nIndex;
		//public int __nIndex;
	}

	class NetObjectChangeset
	{
		private OwnedVector<NetObjectField>* m_pFieldVector;


	}*/
}