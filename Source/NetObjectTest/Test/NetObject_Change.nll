namespace NumbatLogic
{
	namespace NetObject_Change
	{
		/*<?
			include_once "../../Metaprogramming.php";

			$pOutputArray = array();

			$pTestObject = new NetObject("TestObject",
				[
					new NetObjectField("Uint32", "TestId"),
					new NetObjectField("string", "Name"),
					new NetObjectField("Uint32", "Gold"),
				]
			);
			$pOutputArray[] = $pTestObject;

			NetObject_Output($pOutputArray);
		?>*/
			class TestObjectInfo : NetObject::ObjectInfo
			{
				public static TestObjectInfo __pStatic = null;
				public construct() : base(2, 1, 0, 0)
				{
					Assert::Plz(__pStatic == null);
					__pStatic = this;
					__pFieldInfoVector.PushBack(new NetObject::FieldInfo(NetObject::FieldInfo::Type::UINT32, "TestId", 0));
					__pFieldInfoVector.PushBack(new NetObject::FieldInfo(NetObject::FieldInfo::Type::STRING, "Name", 0));
					__pFieldInfoVector.PushBack(new NetObject::FieldInfo(NetObject::FieldInfo::Type::UINT32, "Gold", 1));
				}
				public destruct() { __pStatic = null; }
				public static TestObjectInfo GetStatic() { Assert::Plz(__pStatic != null); return __pStatic; }
			}

			class TestObject : NetObject::Object
			{
				public construct(NetObject::Filter pFilter = null) : base(TestObjectInfo::GetStatic(), pFilter) { }
				public Uint32 GetTestId() { return __GetUint32(0, 0); }
				public string GetName() { return __GetString(0, 1); }
				public Uint32 GetGold() { return __GetUint32(1, 2); }
			}

			class NetObjectStatic
			{
				public NetObject::ChangeMap* __pChangeMap;
				public TestObjectInfo* m_pTestObjectInfo;
				public construct()
				{
					__pChangeMap = own new NetObject::ChangeMap();
					m_pTestObjectInfo = own new TestObjectInfo();
				}
			}
		/*<??>*/
		
		class Test
		{
			public static void ApplyPackUnpackApplyEquals(NetObject::Object pObjectA, NetObject::Object pObjectB, NetObject::Change pChange)
			{
				Assert::Plz(pChange.Apply(pObjectA));
				
				gsBlob* pBlob = own new gsBlob();
				pChange.Pack(pBlob);
				pBlob.SetOffset(0);

				NetObject::Change* pChangeB = own NetObject::Change::CreateAndUnpack(pBlob);
				Assert::Plz(pChangeB != null);
				Assert::Plz(pChangeB.Apply(pObjectB));
				
				Assert::Plz(pObjectA.IsEqual(pObjectB));
			}

			public static void Run()
			{
				// i'm just reusable stuff for the other change tests!
			}
		}
	}
} 