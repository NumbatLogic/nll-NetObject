namespace NumbatLogic
{
	namespace NetObject_BlobPack
	{
		class Test
		{
			public static void Run()
			{
				NetObject_Change::NetObjectStatic* pStaticInfo = own new NetObject_Change::NetObjectStatic();
				NetObject_Change::TestObject* pTestObjectA = own new NetObject_Change::TestObject();
				NetObject_Change::TestObject* pTestObjectB = own new NetObject_Change::TestObject();
				NetObject_Change::TestObject* pTestObjectC = own new NetObject_Change::TestObject();
				
				Assert::Plz(pTestObjectA.GetTestId() == 0);
				pTestObjectA.__pUint32Vector.Set(0, 1234);
				Assert::Plz(pTestObjectA.GetTestId() == 1234);

				pTestObjectA.__pObjectVector.Set(0, new NetObject_Change::TestChild());
				NetObject_Change::TestChild pChild = pTestObjectA.GetSingleChild();

				Assert::Plz(pChild.GetTestChildId() == 0);
				pChild.__pUint32Vector.Set(0, 2222);
				Assert::Plz(pChild.GetTestChildId() == 2222);

				Assert::Plz(ExternalString::Equal(pChild.GetName(), ""));
				pChild.__pStringVector.Set(0, new InternalString("banana"));
				Assert::Plz(ExternalString::Equal(pChild.GetName(), "banana"));

				gsBlob* pBlob = own new gsBlob();
				pTestObjectA.Pack(pBlob);
				
				pBlob.SetOffset(0);

				Assert::Plz(!pTestObjectB.IsEqual(pTestObjectA));
				Assert::Plz(pTestObjectB.Unpack(pBlob));
				Assert::Plz(pTestObjectB.IsEqual(pTestObjectA));

				Assert::Plz(!pTestObjectC.Unpack(pBlob));
				Assert::Plz(!pTestObjectC.IsEqual(pTestObjectA));

				//vector test!
				//vector pack?
			}
		}
	}
} 