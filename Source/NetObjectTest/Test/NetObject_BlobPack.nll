namespace NumbatLogic
{
	namespace NetObject_BlobPack
	{
		/*<?
			include_once "../../Metaprogramming.php";

			$pOutputArray = array();

			$pObjectChild = new NetObject("Child",
				[
					new NetObjectField("Uint32", "ChildId", false),
					new NetObjectField("string", "Name", false),
				]
			);
			$pOutputArray[] = $pObjectChild;

			$pObjectParent = new NetObject("Parent",
				[
					new NetObjectField("Uint32", "ParentId", false),
					new NetObjectField("Child", "Child", false),
				]
			);
			$pOutputArray[] = $pObjectParent;

			$pFilterParent = new NetObjectFilter("ParentFilter", "Parent", array(
				"TestId" => true,
				"Child" => array(
					"ChildId" => true
				)
			));
			$pOutputArray[] = $pFilterParent;

			NetObject_Output($pOutputArray);
		?>*/
			class ChildInfo : NetObject::Info
			{
				public static ChildInfo __pStatic = null;
				public construct()
				{
					Assert::Plz(__pStatic == null);
					__pStatic = this;
				}
				public destruct() { __pStatic = null; }
				public static ChildInfo GetStatic()
				{
					Assert::Plz(__pStatic != null);
					return __pStatic;
				}
			}

			class Child : NetObject::Object
			{
				public Uint32 __nChildId;
				public InternalString* __sName;

				public construct(NetObject::Filter pFilter = null) : base(ChildInfo::GetStatic(), pFilter)
				{
					__sName = own new InternalString("");
				}

				public Uint32 GetChildId() { return __nChildId; }
				public string GetName() { return __sName.GetExternalString(); }

				public void Pack(gsBlob pBlob, voidptr pFieldFilter = null)
				{
					pBlob.PackUint32(__nChildId);
					pBlob.PackInternalString(__sName);
				}
				public bool Unpack(gsBlob pBlob)
				{
					return pBlob.UnpackUint32(__nChildId) &&
							pBlob.UnpackInternalString(__sName);
				}

				public bool IsEqual(Child pOther)
				{
					return __nChildId == pOther.__nChildId &&
							__sName.IsEqual(pOther.__sName.GetExternalString());
				}
			}

			class ParentInfo : NetObject::Info
			{
				public static ParentInfo __pStatic = null;
				public construct()
				{
					Assert::Plz(__pStatic == null);
					__pStatic = this;
				}
				public destruct() { __pStatic = null; }
				public static ParentInfo GetStatic()
				{
					Assert::Plz(__pStatic != null);
					return __pStatic;
				}
			}

			class Parent : NetObject::Object
			{
				public Uint32 __nParentId;
				public Child* __pChild;

				public construct(NetObject::Filter pFilter = null) : base(ParentInfo::GetStatic(), pFilter)
				{
				}

				public Uint32 GetParentId() { return __nParentId; }
				public Child GetChild() { return __pChild; }

				public void Pack(gsBlob pBlob, voidptr pFieldFilter = null)
				{
					pBlob.PackUint32(__nParentId);
					__pChild.Pack(pBlob);
				}
				public bool Unpack(gsBlob pBlob)
				{
					return pBlob.UnpackUint32(__nParentId) &&
							__pChild.Unpack(pBlob);
				}

				public bool IsEqual(Parent pOther)
				{
					return __nParentId == pOther.__nParentId &&
							__pChild == pOther.__pChild;
				}
			}

			class ParentFilter : NetObject::Filter
			{
				public static ParentFilter __pStatic = null;
				public construct()
				{
					Assert::Plz(__pStatic == null);
					__pStatic = this;
				}
				public destruct() { __pStatic = null; }
			}

			class NetObjectStatic
			{
				public ChildInfo* m_pChildInfo;
				public ParentInfo* m_pParentInfo;
				public ParentFilter* m_pParentFilter;
				public construct()
				{
					m_pChildInfo = own new ChildInfo();
					m_pParentInfo = own new ParentInfo();
					m_pParentFilter = own new ParentFilter();
				}
			}
		/*<??>*/

		class Test
		{
			public static void Run()
			{
				NetObjectStatic* pStaticInfo = own new NetObjectStatic();

				Parent* pObjectA = own new Parent();
				pObjectA.__nParentId = 1234;
				pObjectA.__pChild = own new Child();
				pObjectA.__pChild.__nChildId = 2222;
				pObjectA.__pChild.__sName.Set("banana");

				gsBlob* pBlob = own new gsBlob();
				pObjectA.Pack(pBlob);
				
				pBlob.SetOffset(0);

				Parent* pObjectB = own new Parent();
				Assert::Plz(pObjectB.Unpack(pBlob));
				Assert::Plz(pObjectB.IsEqual(pObjectA));

				Parent* pObjectC = own new Parent();
				Assert::Plz(!pObjectC.Unpack(pBlob));
				Assert::Plz(!pObjectC.IsEqual(pObjectA));
			}
		}
	}
} 