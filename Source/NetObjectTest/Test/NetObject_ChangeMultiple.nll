namespace NumbatLogic
{
	namespace NetObject_ChangeMultiple
	{
		class Test
		{
			public static void Run()
			{
				NetObject_Change::NetObjectStatic* pStaticInfo = own new NetObject_Change::NetObjectStatic();
				NetObject_Change::TestObject* pTestObjectA = own new NetObject_Change::TestObject();
				NetObject_Change::TestObject* pTestObjectB = own new NetObject_Change::TestObject();

				// root change
				{
					NetObject::RootChange* pRootChange = own new NetObject::RootChange();
					pRootChange.AddChange(new NetObject::StringSet("Name", "banana"));
					pRootChange.AddChange(new NetObject::Uint32Set("Gold", 1));

					Assert::Plz(ExternalString::Equal(pTestObjectA.GetName(), ""));
					Assert::Plz(pTestObjectA.GetGold() == 0);

					NetObject_Change::Test::ApplyPackUnpackApplyEquals(pTestObjectA, pTestObjectB, pRootChange);

					Assert::Plz(ExternalString::Equal(pTestObjectA.GetName(), "banana"));
					Assert::Plz(pTestObjectA.GetGold() == 1);
				}


				// object create
				{
					NetObject::RootChange* pRootChange = own new NetObject::RootChange();
					Assert::Plz(pTestObjectA.GetSingleChild() == null);
					NetObject::ObjectCreate* pObjectCreate = own new NetObject::ObjectCreate("SingleChild");
						pObjectCreate.AddChange(new NetObject::StringSet("Name", "child name!"));
					pRootChange.AddChange(disown pObjectCreate);

					NetObject_Change::Test::ApplyPackUnpackApplyEquals(pTestObjectA, pTestObjectB, pRootChange);

					NetObject_Change::TestChild pChild = pTestObjectA.GetSingleChild();
					Assert::Plz(ExternalString::Equal(pChild.GetName(), "child name!"));
				}

				// vector create
				{
					NetObject::RootChange* pRootChange = own new NetObject::RootChange();
					Assert::Plz(pTestObjectA.GetNumMultiChild() == 0);
					NetObject::ObjectCreate* pObjectCreate = own new NetObject::ObjectCreate("MultiChild");
						pObjectCreate.AddChange(new NetObject::StringSet("Name", "multi child"));
					pRootChange.AddChange(disown pObjectCreate);

					NetObject_Change::Test::ApplyPackUnpackApplyEquals(pTestObjectA, pTestObjectB, pRootChange);

					Assert::Plz(pTestObjectA.GetNumMultiChild() == 1);
					NetObject_Change::TestChild pChild = pTestObjectA.GetMultiChildByIndex(0);
					Assert::Plz(ExternalString::Equal(pChild.GetName(), "multi child"));
				}

				// navigate object

				// navigate vector, index? field equal?
			}
		}
	}
} 